<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:cache="http://www.springframework.org/schema/cache"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/aop/spring-context-4.0.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
     
	<bean id="roleAspect" class="org.ssm.chapter11.aop.aspect.RoleAspect" />
	<bean id="roleService" class="org.ssm.chapter11.aop.service.impl.RoleServiceImpl" />
	<bean id="role" class="org.ssm.chapter11.aop.pojo.Role" />
	
	<!-- <cache:annotation-driven cache-manager="redisCacheManager" />
	<bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
		<constructor-arg index="0" ref="redisTemplate" />
		<property name="defaultExpiration" value="600" />
		<property name="cacheNames">
			<list>
				<value>redisCacheManager</value>
			</list>
		</property>
	</bean> -->
	
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="50" />
		<property name="maxTotal" value="100" />
		<property name="maxWaitMillis" value="20000" />
	</bean>
	<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="localhost" />
		<property name="port" value="6379" />
		<!-- <property name="password" value="" /> 需要密码连接Redis的场合使用 -->
		<property name="poolConfig" ref="poolConfig" />
	</bean>
	<bean id="jdkSerializationRedisSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
	<bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer" />
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="defaultSerializer" ref="stringRedisSerializer" /> 
		<property name="keySerializer" ref="stringRedisSerializer" />
		<property name="valueSerializer" ref="stringRedisSerializer" />
<!-- 		<property name="valueSerializer" ref="jdkSerializationRedisSerializer" /> -->
	</bean>
	<bean id="redisMsgListener" class="org.spring.redis.RedisMessageListener">
		<property name="redisTemplate" ref="redisTemplate" />
	</bean>
	<bean id="topicContainer" class="org.springframework.data.redis.listener.RedisMessageListenerContainer" destroy-method="destroy">
		<!-- Redis连接工厂 -->
		<property name="connectionFactory" ref="connectionFactory" />
		<!-- 连接池，这里只要线程池生存，才能继续监听 -->
		<property name="taskExecutor">
			<bean class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler">
				<property name="poolSize" value="3" />
			</bean>
		</property>
		<!-- 消息监听map -->
		<property name="messageListeners">
			<map>
				<!-- 配置监听者，key-ref和bean id定义一致 -->
				<entry key-ref="redisMsgListener">
					<!-- 监听类 -->
					<bean class="org.springframework.data.redis.listener.ChannelTopic">
						<constructor-arg value="chat" />
					</bean>
				</entry> 
			</map>
		</property>
	</bean>
</beans>